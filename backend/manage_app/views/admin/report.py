from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.http import HttpResponse
from ...permissions import IsAdminRole
from ...models import Product
from ...serializers import StockReportSerializer,ReportRevenueSerializer
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side, NamedStyle
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
class ReportViewSet(viewsets.ViewSet):
    permission_classes = [IsAdminRole]

    def list(self, request):
        try:
            product_id = request.query_params.get('product_id')
            start_date = request.query_params.get('start_date')
            end_date = request.query_params.get('end_date')
            if not product_id or not start_date or not end_date:
                return Response({"error": "Vui l√≤ng cung c·∫•p product_id, start_date v√† end_date"}, status=status.HTTP_400_BAD_REQUEST)
            product = Product.objects.filter(ProductID=int(product_id)).first()
            if not product:
                return Response({"error": "Product not found"}, status=status.HTTP_404_NOT_FOUND)
            data = {
                "product_id": int(product_id),
                "start_date": start_date,
                "end_date": end_date
            }
            serializer = StockReportSerializer(data)

            print("Serializer data:", serializer.data)
            return Response(serializer.data)
        except Exception as e:
            print(f"Error in ReportViewSet list: {e}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'])
    def export_report(self, request):
        product_id = request.query_params.get('product_id')
        start_date = request.query_params.get('start_date')
        end_date = request.query_params.get('end_date')
        if not product_id or not start_date or not end_date:
            return Response({"error": "Vui l√≤ng cung c·∫•p product_id, start_date v√† end_date"}, status=status.HTTP_400_BAD_REQUEST)
        product = Product.objects.filter(pk=product_id).first()
        if not product:
            return Response({"error": "Product not found"}, status=404)
        data = {
            "product_id": int(product_id),
            "start_date": start_date,
            "end_date": end_date
        }
        serializer = StockReportSerializer(data)
        # T·∫°o workbook v√† sheet
        wb = Workbook()
        ws = wb.active
        ws.title = "Stock Report"

        # ======= Style =======
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill("solid", fgColor="4F81BD")
        center_align = Alignment(horizontal="center", vertical="center")
        right_align = Alignment(horizontal="right", vertical="center")
        thin_border = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin"),
        )

        # ======= Ti√™u ƒë·ªÅ l·ªõn =======
        ws.merge_cells("A1:H1")
        title_cell = ws["A1"]
        title_cell.value = "üìä B√ÅO C√ÅO T·ªíN KHO"
        title_cell.font = Font(size=14, bold=True, color="4F81BD")
        title_cell.alignment = Alignment(horizontal="center", vertical="center")

        # ======= Header =======
        headers = [
            'M√£ ID', 'T√™n s·∫£n ph·∫©m', 'Ng√†y b·∫Øt ƒë·∫ßu', 'Ng√†y k·∫øt th√∫c',
            'T·ªìn ƒë·∫ßu', 'Nh·∫≠p', 'Xu·∫•t', 'T·ªìn cu·ªëi'
        ]
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=2, column=col_num, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = center_align
            cell.border = thin_border

        # ======= Data =======
        row_data = [
            serializer.data['product_id'],
            serializer.data['product_name'],
            serializer.data['start_date'],
            serializer.data['end_date'],
            serializer.data['beginning_inventory'],
            serializer.data['imports'],
            serializer.data['exports'],
            serializer.data['ending'],
        ]

        for col_num, value in enumerate(row_data, 1):
            cell = ws.cell(row=3, column=col_num, value=value)
            if isinstance(value, int) or isinstance(value, float):
                cell.alignment = right_align
                # Format s·ªë c√≥ d·∫•u ph√¢n c√°ch
                cell.number_format = '#,##0'
            else:
                cell.alignment = center_align
            cell.border = thin_border

        # ======= Auto fit column width =======
            for col_idx, col in enumerate(ws.columns, 1):
                max_length = 0
                col_letter = get_column_letter(col_idx)
                for cell in col:
                    try:
                        if cell.value:
                            max_length = max(max_length, len(str(cell.value)))
                    except:
                        pass
                ws.column_dimensions[col_letter].width = max_length + 2

        # ======= Response =======
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            headers={'Content-Disposition': f'attachment; filename=stock_report_{product_id}.xlsx'}
        )
        wb.save(response)
        return response

class ReportRevenueViewSet(viewsets.ViewSet):
    permission_classes = [IsAdminRole]

    def list(self, request):
        start_date = request.query_params.get('start_date')
        end_date = request.query_params.get('end_date')
        if not start_date or not end_date:
            return Response({"error": "Vui l√≤ng cung c·∫•p start_date v√† end_date"}, status=status.HTTP_400_BAD_REQUEST)
        data = {
            "start_date": start_date,
            "end_date": end_date
        }
        serializer = ReportRevenueSerializer(data)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def export_report(self, request):
        start_date = request.query_params.get('start_date')
        end_date = request.query_params.get('end_date')
        if not start_date or not end_date:
            return Response({"error": "Vui l√≤ng cung c·∫•p start_date v√† end_date"}, status=status.HTTP_400_BAD_REQUEST)
        data = {
            "start_date": start_date,
            "end_date": end_date
        }
        serializer = ReportRevenueSerializer(data)
        # T·∫°o workbook v√† sheet
        doc = Document()

        # ====== Logo + Ti√™u ƒë·ªÅ ======
        doc.add_paragraph().add_run("C√îNG TY TNHH Tr∆∞·ªùngPRO").bold = True
        doc.add_paragraph("ƒê·ªãa ch·ªâ: Th√†nh ph·ªë Fleiku, Gia Lai").italic = True

        title = doc.add_heading("B√ÅO C√ÅO DOANH THU", level=0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Th·ªùi gian b√°o c√°o
        time_para = doc.add_paragraph(
            f"T·ª´ ng√†y {serializer.data['start_date']} ƒë·∫øn ng√†y {serializer.data['end_date']}"
        )
        time_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

        doc.add_paragraph("")  # d√≤ng tr·ªëng

        # ====== B·∫£ng s·ªë li·ªáu ======
        table = doc.add_table(rows=5, cols=2)
        table.style = "Light Grid Accent 1"
        table.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Header
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = "Ch·ªâ ti√™u"
        hdr_cells[1].text = "Gi√° tr·ªã (VNƒê)"

        # D·ªØ li·ªáu
        data_rows = [
            ("T·ªïng doanh thu", serializer.data["total_revenue"]),
            ("ƒê√£ thanh to√°n", serializer.data["total_paid_purchase"]),
            ("Ch∆∞a thanh to√°n", serializer.data["total_unpaid_purchases"]),
            ("Doanh Thu R√≤ng", serializer.data["total_amount"]),
        ]

        for i, (label, value) in enumerate(data_rows, start=1):
            row_cells = table.rows[i].cells
            row_cells[0].text = label
            row_cells[1].text = f"{value:,} VNƒê"

            # Style cho s·ªë li·ªáu
            run = row_cells[1].paragraphs[0].runs[0]
            run.font.bold = True
            run.font.size = Pt(12)
            run.font.color.rgb = RGBColor(0, 102, 204)  # xanh d∆∞∆°ng

        # ====== Nh·∫≠n x√©t ======
        doc.add_paragraph("\nNH·∫¨N X√âT:", style="Heading 2")
        doc.add_paragraph(
            "T·ªïng doanh thu trong k·ª≥ ƒë·∫°t m·ª©c kh·∫£ quan. "
            "T·ª∑ l·ªá ƒë∆°n h√†ng ƒë√£ thanh to√°n chi·∫øm ph·∫ßn l·ªõn. "
            "C·∫ßn ƒë·∫©y m·∫°nh thu h·ªìi c√¥ng n·ª£ v√† t·ªëi ∆∞u h√≥a quy tr√¨nh b√°n h√†ng."
        )

        # ====== Ng∆∞·ªùi l·∫≠p b√°o c√°o ======
        doc.add_paragraph("\n\nNg∆∞·ªùi l·∫≠p b√°o c√°o", style="Normal").alignment = WD_ALIGN_PARAGRAPH.RIGHT
        doc.add_paragraph("........................................").alignment = WD_ALIGN_PARAGRAPH.RIGHT

        # ====== Xu·∫•t file ======
        response = HttpResponse(
            content_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": 'attachment; filename="revenue_report.docx"'},
        )
        doc.save(response)
        return response